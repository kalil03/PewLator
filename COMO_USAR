# Projeto Web App

Este projeto é uma aplicação web que inclui uma tela de login e uma calculadora PEWS. Ele usa um backend Node.js com MongoDB e um frontend simples com HTML, Tailwind CSS e JavaScript.

## Estrutura do Projeto

- `server/`: Contém o código do backend (Node.js, Express, Mongoose).
  - `models/`: Contém os modelos Mongoose ([`User.js`](server/models/User.js), [`Consultation.js`](server/models/Consultation.js)).
  - [`server.js`](server/server.js): Arquivo principal do servidor.
- `client/`: Contém o código do frontend (HTML, CSS, JavaScript).
  - [`index.html`](client/index.html): Página principal da aplicação.
  - [`login.html`](client/login.html): Página de login.
  - [`register.html`](client/register.html): Página de registro.
  - [`historico.html`](client/historico.html): Página de histórico de consultas.
  - [`script.js`](client/script.js): Arquivo JavaScript principal.

## Padrão de Projeto Utilizado

Este projeto segue o padrão de projeto **MVC (Model-View-Controller)**. Abaixo está uma descrição de como cada componente se encaixa nesse padrão:

### Modelo (Model)

Os modelos são representados pelas definições de esquema do Mongoose para [`User`](server/models/User.js) e [`Consultation`](server/models/Consultation.js). Eles definem a estrutura dos dados e as interações com o banco de dados MongoDB.

### Visão (View)

As visões são representadas pelos arquivos HTML no diretório `client/`. Eles definem a interface do usuário e a apresentação dos dados.

### Controlador (Controller)

Os controladores são representados pelas rotas e lógica de negócios no diretório [`server`](server/server.js). Eles lidam com as requisições HTTP, interagem com os modelos e retornam as respostas apropriadas.

## Funcionalidades

- **Autenticação de Usuário**: Registro, login e logout de usuários.
- **Calculadora PEWS**: Interface para calcular a Pontuação de Alerta Precoce Pediátrico.
- **Histórico de Consultas**: Visualização do histórico de consultas realizadas.
- **Cadastro de Usuários**: Interface para cadastro de novos usuários.

## Tecnologias Utilizadas

- **Backend**:
  - Node.js
  - Express.js
  - Mongoose (para interações com MongoDB)
- **Frontend**:
  - HTML
  - Tailwind CSS
  - JavaScript
- **Banco de Dados**:
  - MongoDB

## Instalação e Execução

### Pré-requisitos

- Node.js instalado
- MongoDB instalado e em execução
- Docker

### Passos para Instalação

1. Clone o repositório:
   1.git clone <URL_DO_REPOSITORIO>
   2.cd <NOME_DO_REPOSITORIO>
   3.npm install express body-parser mongose cors jsonwebtoken
   4.cd server
   5.node server.js
   6.docker-compose up --build
